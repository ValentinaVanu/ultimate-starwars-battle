{"version":3,"sources":["component/intro/mp3/starwarssong.mp3","component/intro/img/deathstar.jpg","component/intro/intro.styled.js","store/intro.constant.js","component/intro/intro.component.jsx","store/intro.action.js","store/card.constant.js","store/card.action.js","component/card-menu/card-menu.style.js","component/people/people.jpg","component/starship/starships.webp","component/menu/menu.style.js","store/menu.constant.js","component/menu/menu.component.jsx","store/menu.action.js","component/card-menu/card-menu.component.jsx","component/app/app.styled.js","component/reusable/reusable.style.js","component/fight/fight.style.js","component/fight/fight.component.jsx","component/starship/starship.style.js","component/starship/starship.component.jsx","component/people/pleople.style.js","component/people/people.component.jsx","component/fight-first-version/fight-first-version.style.js","component/fight-first-version/fight-first-version.component.jsx","component/app/app.component.jsx","store/card.reducer.js","store/intro.reducer.js","store/menu.reducer.js","store/reducer.js","store/index.js","index.jsx"],"names":["StyledLink","styled","Link","StyleCredits","div","StyledCrawl","DeathStarBackgroud","deathStar","SKIP_INTRO","SET_MUTED","Intro","audioRef","useRef","useSelector","intro","muted","skipIntro","dispatch","useDispatch","useEffect","current","volume","play","setTimeout","navigate","toggleMute","type","constant","IA","style","color","margin","onClick","ref","src","starWarsSound","to","SET_OPPONENT","FETCH_OPPONENT","SET_FIGHTER","SET_STARSHIPS","setOpponentListAction","who","list","StyledLoading","span","StyledCardBody","StyledCard","Card","StyledCardWrapper","StyledMenuButton","Button","StyledMenuWrapper","DISPLAY_NEW_OPPONENTS","SET_OPPONENTS_TO_FIGHT","Menu","card","people","starships","pickOpponents","first","second","opponents","a","Math","round","random","b","randomList","sort","randomPeopleList","randomPStarshipList","console","log","displayOpponents","CardMenu","menu","forEach","get","result","data","results","error","map","key","name","mass","CardImg","peopleImg","CardTitle","tag","crew","starshipsImg","isLoading","StyledRouter","Router","StyledAppWrapper","StyledCardHeader","StyledCardBtn","CardSubtitle","CardBody","StyledcardDescription","StyledcardTitle","StyledTitle","StyledWinnerCard","StyledFightWrapper","Fight","firstOpponent","secondOpponent","winner","parseInt","getWinner","StyledWarshipCard","Starship","starship","firstStarship","secondStarship","top","alt","className","StyledPeopleCard","People","fighter","firstFighter","secondFighter","FirstVersion","App","window","location","port","path","initialState","cardReducer","state","action","introReducer","menuReducer","createReducer","asyncReducers","combineReducers","reduxModule","REPLACE","enhancer","composeEnhancers","compose","applyMiddleware","thunk","store","createStore","here","document","getElementById","app","render"],"mappings":"yQAAe,MAA0B,yC,cCA1B,MAA0B,sCCM5BA,EAAaC,YAAOC,IAAPD,CAAH,4VAkBVE,EAAeF,IAAOG,IAAV,8jBA2BZC,EAAcJ,IAAOG,IAAV,waAuBXE,EAAqBL,IAAOG,IAAV,0LAGLG,GC7EbC,EAAa,qBACbC,EAAY,oB,0DCYnBC,EAAQ,WACZ,IAAMC,EAAWC,mBADC,EAESC,aAAY,gBAAGC,EAAH,EAAGA,MAAH,MAAgB,CACrDA,EAAMC,MACND,EAAME,cAJU,mBAEXD,EAFW,KAEJC,EAFI,KAMZC,EAAWC,cAEjBC,qBACE,WACER,EAASS,QAAQC,OAAS,EAC1BV,EAASS,QAAQL,MAAQA,GACxBA,GAASJ,EAASS,QAAQE,OAC3BC,YAAW,WACTC,YAAS,gBACR,OAEL,CAACT,IAGH,IAAMU,EAAa,WAEjBR,EC5B0B,SAAAF,GAAK,MAAK,CACtCW,KAAMC,EACNZ,SD0BWa,EAAmBb,KAM9B,OACE,oCACIC,GAAa,eAAC,EAAD,WAEZD,GAAS,cAAC,IAAD,CACRc,MAAO,CAAEC,MAAO,QAASC,OAAQ,QACjCC,QAASP,KAETV,GAAS,cAAC,IAAD,CACTc,MAAO,CAAEC,MAAO,QAASC,OAAQ,QACjCC,QAASP,IAGX,cAAC,EAAD,UACE,eAAC,EAAD,WACE,uBAAOQ,IAAKtB,EAAUuB,IAAKC,IAC3B,0DACA,sKACA,iGACA,oJACA,oDAGJ,eAAC,EAAD,CACEC,GAAG,aADL,wBAGa,cAAC,IAAD,a,qCElERC,GAAe,sBACfC,GAAiB,wBACjBC,GAAc,4BACdC,GAAgB,gC,oBCUhBC,GAAwB,SAACC,EAAKC,GAAN,MAAgB,CACnDjB,KAAMC,GACNe,MACAC,S,UCbWC,GAAgB3C,IAAO4C,KAAV,8GAObC,GAAiB7C,IAAOG,IAAV,iDAId2C,GAAa9C,YAAO+C,KAAP/C,CAAH,8UAkBVgD,GAAoBhD,IAAOG,IAAV,qgB,oBCjCf,OAA0B,mCCA1B,OAA0B,uC,UCK5B8C,GAAmBjD,YAAOkD,KAAPlD,CAAH,mEAIhBD,GAAaC,YAAOC,IAAPD,CAAH,4RAgBVmD,GAAoBnD,IAAOG,IAAV,+ZCzBjBiD,GAAwB,+BACxBC,GAAyB,gCCShCC,GAAO,WACX,IAAMtC,EAAWC,cADA,EAEaL,aAAY,gBAAG2C,EAAH,EAAGA,KAAH,MAAe,CACvDA,EAAKC,OACLD,EAAKE,cAJU,mBAETD,EAFS,KAEDC,EAFC,KASXC,EAAgB,WACpB,IAAIC,EAAOC,EClB0BC,EDmB/BC,EAAIC,KAAKC,MAAMD,KAAKE,UACpBC,EAAIH,KAAKC,MAAMD,KAAKE,UAC1B,GAAKH,IAAMI,GAAW,IAANJ,EAAS,CACvB,IAAMK,EAAaX,EAAOd,KAAK0B,MAAK,kBAAML,KAAKE,SAAW,MAC1DN,EAAQQ,EAAW,GACnBP,EAASO,EAAW,QACf,GAAKL,IAAMI,GAAW,IAANJ,EAAS,CAC9B,IAAMK,EAAaV,EAAUf,KAAK0B,MAAK,kBAAML,KAAKE,SAAW,MAC7DN,EAAQQ,EAAW,GACnBP,EAASO,EAAW,OACf,CACL,IAAME,EAAmBb,EAAOd,KAAK0B,MAAK,kBAAML,KAAKE,SAAW,MAC1DK,EAAsBb,EAAUf,KAAK0B,MAAK,kBAAML,KAAKE,SAAW,MAC3D,IAANH,GACHH,EAAQU,EAAiB,GACzBT,EAASU,EAAoB,KAE7BV,EAASS,EAAiB,GAC1BV,EAAQW,EAAoB,IAIhC,OADAC,QAAQC,IAAIb,EAAOC,EAAQ,cACpB5C,GCzC8B6C,EDyCK,CAACF,QAAOC,UCzCJ,cAChDnC,KAAMC,IACHmC,MDgDH,OACE,eAAC,GAAD,WACE,cAAC,GAAD,CACE9B,QATwB,WAC5B2B,IACA1C,ECzC0D,CAC5DS,KAAMC,GACN+C,kBDuCqC,IACnClD,YAAS,WAKP,4BAIA,cAAC,GAAD,CACEY,GAAG,0BADL,uBAIA,cAAC,GAAD,CACEA,GAAG,gBADL,+BElDAuC,GAAW,WACf,IAAM1D,EAAWC,cADI,EAE2BL,aAAY,gBAAG2C,EAAH,EAAGA,KAAMoB,EAAT,EAASA,KAAT,MAAqB,CAC/EpB,EAAKC,OACLD,EAAKE,UACLkB,EAAKF,qBALc,mBAEbjB,EAFa,KAELC,EAFK,UAerB,OARAvC,qBACE,WACEF,GRAG,SAAAA,GACL,IAOE,CAAC,SAAU,aAAa4D,QANT,yCAAG,WAAMnC,GAAN,gBAAAqB,EAAA,6DAChB9C,EAAS,CAACS,KAAMC,GAAyBe,QADzB,SAEKoC,KAAI,yBAAD,OAA0BpC,EAA1B,MAFR,OAEVqC,EAFU,OAGhB9D,EAASwB,GAAsBC,EAAKqC,EAAOC,KAAKC,UAChDT,QAAQC,IAAIM,GAJI,2CAAH,uDAOf,MAAOG,GACPV,QAAQC,IAAI,SAAUS,SQRxB,IAKA,mCACE,eAAC,GAAD,WACGzB,GAAUA,EAAOd,KAAKwC,KAAI,WAAgBC,GAAS,IAAtBC,EAAqB,EAArBA,KAAqB,EAAfC,KAClC,OACE,eAAC,GAAD,WACE,cAACC,GAAA,EAAD,CAASrD,IAAKsD,KACd,cAAC,GAAD,UACE,cAACC,GAAA,EAAD,CACEC,IAAI,KADN,SACYL,QAJID,MAUvB3B,GAAUA,EAAOd,KAAKwC,KAAI,WAAgBC,GAAS,IAAtBC,EAAqB,EAArBA,KAAqB,EAAfM,KAClC,OACE,eAAC,GAAD,WACE,cAACJ,GAAA,EAAD,CAASrD,IAAK0D,KACd,cAAC,GAAD,UACE,cAACH,GAAA,EAAD,CACEC,IAAI,KADN,SACYL,QAJID,MAUvB1B,EAAUmC,WAAa,cAAC,GAAD,yBAGxB,cAAC,GAAD,UCrDKC,GAAe7F,YAAO8F,IAAP9F,CAAH,6CAIZ+F,GAAmB/F,IAAOG,IAAV,+C,oBCJhB6F,GAAmBhG,IAAOG,IAAV,gLAShB8F,GAAgBjG,YAAOkD,KAAPlD,CAAH,8OAiBb6C,IAJqB7C,YAAOkG,KAAPlG,CAAH,oDAIDA,YAAOmG,KAAPnG,CAAH,yJAQdoG,GAAwBpG,YAAOkG,KAAPlG,CAAH,kDAGrBqG,GAAkBrG,YAAOwF,KAAPxF,CAAH,wHCrCfsG,ID6CatG,YAAO+C,KAAP/C,CAAH,6DC7CIA,IAAOG,IAAV,gMAWX2C,GAAa9C,YAAO+C,KAAP/C,CAAH,+CAIVgD,GAAoBhD,IAAOG,IAAV,sRAcjBoG,GAAmBvG,YAAO+C,KAAP/C,CAAH,kIAMhBwG,GAAqBxG,IAAOG,IAAV,ohBC/BzBsG,GAAQ,WAAO,IAAD,EACsB7F,aAAY,gBAAG+D,EAAH,EAAGA,KAAH,MAAc,CAChEA,EAAKd,UAAUF,MACfgB,EAAKd,UAAUD,WAHC,mBACX8C,EADW,KACIC,EADJ,KA2ClB,OACE,eAACH,GAAD,YACIE,GAAiB,gEAClBA,GAAiB,eAAC,GAAD,WAChB,cAACJ,GAAD,sBACA,cAAC,GAAD,UACE,cAAC,GAAD,UACE,cAACd,GAAA,EAAD,CACEC,IAAI,KADN,SACYiB,EAActB,WAG9B,cAAC,GAAD,UACE,cAAC,GAAD,UACE,cAACI,GAAA,EAAD,CACEC,IAAI,KADN,SACYkB,EAAevB,WAG/B,cAACmB,GAAD,UAEE,cAAC,GAAD,UACE,eAACf,GAAA,EAAD,CACEC,IAAI,KADN,6BAxDQ,WAChB,IAAImB,EACJ,GAAIF,EAAcrB,MAAQsB,EAAetB,KAErCuB,EADEC,SAASH,EAAcrB,MAAQwB,SAASF,EAAetB,MAChDqB,EAActB,KAEduB,EAAevB,UAGvB,GAAIsB,EAAcrB,MAAQsB,EAAejB,KAE1CkB,EADEC,SAASH,EAAcrB,MAAQwB,SAASF,EAAejB,MAChDgB,EAActB,KAEduB,EAAevB,UAGvB,GAAIsB,EAAchB,MAAQiB,EAAetB,KAE1CuB,EADEC,SAASH,EAAchB,MAAQmB,SAASF,EAAetB,MAChDqB,EAActB,KAEduB,EAAevB,SAGvB,KAAIsB,EAAchB,OAAQiB,EAAejB,KAQ5C,MAAO,YANLkB,EADEC,SAASH,EAAchB,MAAQmB,SAASF,EAAejB,MAChDgB,EAActB,KAEduB,EAAevB,KAM5B,OAAOwB,EAwB6BE,GAD5B,eAKN,cAAC,GAAD,QCzEOC,GAAoB/G,YAAO+C,KAAP/C,CAAH,4QCOxBgH,GAAW,WACf,IAAMhG,EAAWC,cADI,EAE8BL,aAAY,gBAAG2C,EAAH,EAAGA,KAAH,MAAe,CAC5EA,EAAKE,UACLF,EAAK0D,SAAStD,MACdJ,EAAK0D,SAASrD,WALK,mBAEdH,EAFc,KAEHyD,EAFG,KAEYC,EAFZ,KA2BrB,OACE,eAAC,GAAD,WACE,cAAC7B,GAAA,EAAD,CAAS8B,KAAG,EAACC,IAAI,gBAAgBpF,IAAK0D,KACtC,eAAC,GAAD,YACEuB,GAAiB,cAAC,GAAD,CAAoBzB,IAAI,KAAxB,uBAGlByB,GAAiB,cAAC,GAAD,CAAoBzB,IAAI,KAAxB,UAxBMyB,EAAcxB,KACbmB,SAASM,EAAezB,MAE3C,GAAN,OAAUwB,EAAc9B,KAAxB,kBAEM,GAAN,OAAU+B,EAAe/B,KAAzB,mBAsBA,cAAC,GAAD,CACErD,QAlBgB,WAAO,IdrBEkF,EcqBH,EACFxD,EAAUf,KAAK0B,MAAK,kBAAML,KAAKE,SAAW,MADxC,mBACnBN,EADmB,KACZC,EADY,KAE1B5C,GdvB6BiG,EcuBCC,EAAgB,GAAK,CAACvD,QAAOC,UdvBtB,cACvCnC,KAAMC,IACHuF,McoCC,kCAIA,eAAC,GAAD,WACGC,GACD,qCACA,cAAChB,GAAA,EAAD,CACET,IAAI,KACJ6B,UAAU,kBAFZ,SAKGJ,EAAc9B,OAEjB,cAAC,GAAD,CACEK,IAAI,KACJ6B,UAAU,kBAFZ,SAIGJ,EAAcxB,OAEjB,cAACQ,GAAA,EAAD,CACET,IAAI,KACJ6B,UAAU,kBAFZ,SAKGH,EAAe/B,OAElB,cAAC,GAAD,CACEK,IAAI,KACJ6B,UAAU,kBAFZ,SAIGH,EAAezB,WAIlBwB,GAAiBzD,EAAUf,KAAKwC,KAAI,gBAAGE,EAAH,EAAGA,KAAMM,EAAT,EAASA,KAAT,OACpC,eAAC,WAAD,WACI,cAACQ,GAAA,EAAD,CACET,IAAI,KACJ6B,UAAU,kBAFZ,SAKKlC,IAEL,cAAC,GAAD,CACEK,IAAI,KACJ6B,UAAU,kBAFZ,SAIK5B,MAZMN,aC/EVmC,GAAmBvH,YAAO+C,KAAP/C,CAAH,0QCOvBwH,GAAS,WACb,IAAMxG,EAAWC,cADE,EAE6BL,aAAY,gBAAG2C,EAAH,EAAGA,KAAH,MAAe,CACzEA,EAAKC,OACLD,EAAKkE,QAAQ9D,MACbJ,EAAKkE,QAAQ7D,WALI,mBAEXJ,EAFW,KAEHkE,EAFG,KAEWC,EAFX,KA0BnB,OACE,eAAC,GAAD,WACA,cAACrC,GAAA,EAAD,CAAS8B,KAAG,EAACC,IAAI,aAAapF,IAAKsD,KACnC,eAAC,GAAD,WACGmC,GAAgB,cAAC,GAAD,CAAoBjC,IAAI,KAAxB,UAnBOiC,EAAarC,KACbwB,SAASc,EAActC,MAEzC,GAAN,OAAUqC,EAAatC,KAAvB,kBAEM,GAAN,OAAUuC,EAAcvC,KAAxB,oBAkBEsC,GAAgB,cAAC,GAAD,CAAoBjC,IAAI,KAAxB,oBAGlB,cAAC,GAAD,CACE1D,QAjBe,WAAO,IhB5BE0F,EgB4BH,EACDjE,EAAOd,KAAK0B,MAAK,kBAAML,KAAKE,SAAW,MADtC,mBAClBN,EADkB,KACXC,EADW,KAEzB5C,GhB9B4ByG,EgB8BCC,EAAe,GAAK,CAAC/D,QAAOC,UhB9BtB,cACrCnC,KAAMC,IACH+F,MgB0CC,iCAIF,eAAC,GAAD,WACGC,GACD,qCACE,cAACxB,GAAA,EAAD,CACET,IAAI,KACJ6B,UAAU,kBAFZ,SAKGI,EAAatC,OAEhB,cAAC,GAAD,CACEK,IAAI,KACJ6B,UAAU,kBAFZ,SAIGI,EAAarC,OAEhB,cAACa,GAAA,EAAD,CACET,IAAI,KACJ6B,UAAU,kBAFZ,SAKGK,EAAcvC,OAEjB,cAAC,GAAD,CACEK,IAAI,KACJ6B,UAAU,kBAFZ,SAIGK,EAActC,WAIjBqC,GAAgBlE,EAAOd,KAAKwC,KAAI,gBAAGE,EAAH,EAAGA,KAAMC,EAAT,EAASA,KAAT,OAChC,eAAC,WAAD,WACI,cAACa,GAAA,EAAD,CACET,IAAI,KACJ6B,UAAU,kBAFZ,SAKKlC,IAEL,cAAC,GAAD,CACEK,IAAI,KACJ6B,UAAU,kBAFZ,SAIKjC,MAZMD,aCjFVoB,GAAqBxG,IAAOG,IAAV,2hBCIzByH,GAAe,WACnB,OACE,eAAC,GAAD,WACE,cAAC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,QCHAC,GAAM,WAEQjH,aAAY,qBAAGC,MAAkBE,aAClC+G,OAAOC,SAAhBC,KAER,OACE,cAACjC,GAAD,UACE,eAACF,GAAD,WACE,cAAC,EAAD,CAAOoC,KAAK,MACZ,cAAC,GAAD,CAAUA,KAAK,gBACf,cAAC,GAAD,CAAOA,KAAK,WACZ,cAAC,GAAD,CAAcA,KAAK,yBAEnB,cAAC,EAAD,CAAOA,KAAK,kBACZ,cAAC,GAAD,CAAUA,KAAK,6BACf,cAAC,GAAD,CAAOA,KAAK,wBACZ,cAAC,GAAD,CAAcA,KAAK,4C,mCCtBdC,GAAe,CAC1B1E,OAAQ,CAACd,KAAM,GAAIkD,WAAW,GAC9BnC,UAAW,CAACf,KAAM,GAAIkD,WAAW,GACjC6B,QAAS,GACTR,SAAU,IAGCkB,GAAc,WAAqC,IAAnCC,EAAkC,uDAA1BF,GAAcG,EAAY,uCAC7D,OAAQA,EAAO5G,MACb,KAAKC,GACH,OAAO,6BACF0G,GADL,IAEEnB,SAAU,CACRtD,MAAO0E,EAAO1E,MACdC,OAAQyE,EAAOzE,UAGrB,KAAKlC,GACH,OAAO,6BACF0G,GADL,IAEEX,QAAS,CACP9D,MAAO0E,EAAO1E,MACdC,OAAQyE,EAAOzE,UAGrB,KAAKlC,GACH,OAAO,6BACF0G,GADL,mBAEGC,EAAO5F,IAAM,CACZC,KAAM,GACNkD,WAAW,KAGjB,KAAKlE,GACH,OAAO,6BACF0G,GADL,mBAEGC,EAAO5F,IAAM,CACZC,KAAM2F,EAAO3F,KACbkD,WAAW,KAGjB,QACE,OAAOwC,IC3CAF,GAAe,CAC1BnH,WAAW,EACXD,OAAO,GAGIwH,GAAe,WAAmC,IAAlCF,EAAiC,uDAAzBF,GAAcG,EAAW,uCAC5D,OAAQA,EAAO5G,MACb,KAAKC,EACH,OAAO,6BACF0G,GADL,IAEEtH,MAAOuH,EAAOvH,QAElB,KAAKY,EACH,OAAO,6BACF0G,GADL,IAEErH,UAAWsH,EAAOtH,YAEtB,QACE,OAAOqH,IClBAF,GAAe,CAC1BzD,kBAAkB,EAClBZ,UAAW,IAGA0E,GAAc,WAAoC,IAAlCH,EAAiC,uDAAzBF,GAAcG,EAAW,uCAC5D,OAAQA,EAAO5G,MACb,KAAKC,GACH,OAAO,6BACF0G,GADL,IAEEvE,UAAW,CACTF,MAAO0E,EAAO1E,MACdC,OAAQyE,EAAOzE,UAGrB,KAAKlC,GACH,OAAO,6BACF0G,GADL,IAEE3D,iBAAkB4D,EAAO5D,mBAE7B,QACE,OAAO2D,ICXEI,GAPO,SAAAC,GAAa,OAAIC,aAAgB,cACnD7H,MAAOyH,GACP/E,KAAM4E,GACNxD,KAAM4D,IACLE,KCALE,KAAsCC,QAAU,eAEhD,IAOMC,IAAWC,EAFXC,MAE4BC,aAAgBC,OAE5CC,GAAQC,aAAYX,KAAiBK,IAE3CK,GAAMT,cAAgB,GAEf,IASQS,MCrBTE,I,MAAOC,SAASC,eAAe,QAE/BC,GAAK,eAAC,IAAD,CAAUL,MAAOA,GAAjB,UACX,cAAC,GAAD,IADW,OAGXM,iBAAOD,GAAKH,M","file":"static/js/main.e1827a0e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/starwarssong.1852ca55.mp3\";","export default __webpack_public_path__ + \"static/media/deathstar.3125cba8.jpg\";","import { Button } from 'react-bootstrap'\nimport styled from 'styled-components'\nimport deathStar from './img/deathstar.jpg'\nimport { Link } from '@reach/router'\n\n\nexport const StyledLink = styled(Link)`\n  && {\n    background-color: #000;\n    border: 1px solid #cbcbcb;\n    border-radius: 5px;\n    color: #cbcbcb;\n    padding: 0.5rem;\n    text-decoration: none;\n    margin: 2rem;\n    align-self: flex-end;\n\n    :hover{\n      /* background-color: rgba(48,48,51,0.93); */\n      border-color: #feda4a;\n    }\n  }\n`\n\nexport const StyleCredits = styled.div`\n  overflow: hidden;\n  display: flex;\n  justify-content: center;\n  position: relative;\n  height: 100%;\n  color: #feda4a;\n  font-family: 'Pathway Gothic One', sans-serif;\n  font-size: 500%;\n  font-weight: 600;\n  letter-spacing: 6px;\n  line-height: 150%;\n  perspective: 400px;\n  text-align: center;\n\n  &::before {\n    content: '';\n    position: absolute;\n    pointer-events: none;\n    width: 100%;\n    min-height: 60vh;\n    top: -25px;\n    background-image: linear-gradient(0deg, transparent, black 75%);\n    z-index: 1;\n  }\n`\n\nexport const StyledCrawl = styled.div`\n  position: relative;\n  top: 9999px;\n  transform-origin: 50% 100%;\n  animation: crawl 50s linear;\n\n  && h1 {\n    font-size: 90%;\n    text-align: center;\n    margin: 0 0 100px\n  }\n  @keyframes crawl {\n    0% {\n      top: 200px;\n      transform: rotateX(20deg)  translateZ(0);\n    }\n    100% { \n      top: -6000px;\n      transform: rotateX(25deg) translateZ(-2500px);\n    }\n  }\n`\n\nexport const DeathStarBackgroud = styled.div`\n  display: flex;\n  flex-direction: column;\n  background-image: url(${deathStar});\n  background-position: center center;\n  background-size: cover;\n  height: 100%;\n`\n","export const SKIP_INTRO = '[intro] SKIP_INTRO'\nexport const SET_MUTED = '[intro] SET_MUTED'\n","import React, { useEffect, useRef, useState } from 'react'\nimport { navigate } from '@reach/router'\n\nimport starWarsSound from './mp3/starwarssong.mp3'\nimport * as SI from './intro.styled'\nimport { useDispatch, useSelector } from 'react-redux'\nimport * as IA from '../../store/intro.action'\nimport VolumeUpIcon from '@material-ui/icons/VolumeUp'\nimport VolumeOffIcon from '@material-ui/icons/VolumeOff'\nimport SkipNextIcon from '@material-ui/icons/SkipNext'\n\n\n\nconst Intro = () => {\n  const audioRef = useRef()\n  const [muted, skipIntro] = useSelector(({ intro }) => ([\n    intro.muted,\n    intro.skipIntro,\n  ]))\n  const dispatch = useDispatch()\n\n  useEffect(\n    () => {\n      audioRef.current.volume = 1\n      audioRef.current.muted = muted\n      !muted && audioRef.current.play()\n      setTimeout(() => {\n        navigate(\"/card-menu\")\n      }, 20000);\n    },\n    [muted]\n  )\n\n  const toggleMute = () => {\n    // setMuted(!muted)\n    dispatch(IA.setMutedAction(!muted))\n  }\n  const handleSkipIntro = () => {\n    dispatch(IA.skipIntroAction(true))\n  }\n\n  return (\n    <>\n      {!skipIntro && <SI.DeathStarBackgroud>\n\n        {muted && <VolumeOffIcon\n          style={{ color: \"white\", margin: '2rem' }}\n          onClick={toggleMute}\n        />}\n        {!muted && <VolumeUpIcon\n          style={{ color: \"white\", margin: '2rem' }}\n          onClick={toggleMute}\n        />}\n\n        <SI.StyleCredits>\n          <SI.StyledCrawl>\n            <audio ref={audioRef} src={starWarsSound} />\n            <h1>Ultimate StarWars Battle</h1>\n            <p> Build an application to select random people or starships and render their details to see who would win based on a common attribute.</p>\n            <p>A person with greater mass wins, a starship with more crew wins.</p>\n            <p>Once two cards are displayed the app should declare one of the cards a winner based on the higher common attribute.</p>\n            <p>Being Creative</p>\n          </SI.StyledCrawl>\n        </SI.StyleCredits>\n        <SI.StyledLink\n          to=\"/card-menu\"\n        >\n          Skip Intro <SkipNextIcon />\n        </SI.StyledLink>\n      </SI.DeathStarBackgroud>}\n    </>\n  )\n}\n\nexport { Intro }\n","import * as constant from './intro.constant'\n\nexport const skipIntroAction = skipIntro => ({\n  type: constant.SKIP_INTRO,\n  skipIntro\n})\n\nexport const setMutedAction = muted => ({\n  type: constant.SET_MUTED,\n  muted\n})\n","export const GET_OPPONENT = '[card] GET_OPPONENT'\nexport const SET_OPPONENT = '[card] SET_OPPONENT'\nexport const FETCH_OPPONENT = '[card] FETCH_OPPONENT'\nexport const SET_FIGHTER = '[card-people] SET_FIGHTER'\nexport const SET_STARSHIPS = '[card-starship] SET_STARSHIPS'\n","import * as constant from './card.constant'\nimport get from 'axios'\n\n\nexport const setFighterAction = fighter => ({\n  type: constant.SET_FIGHTER,\n  ...fighter\n})\n\nexport const setStarshipAction = starship => ({\n  type: constant.SET_STARSHIPS,\n  ...starship\n})\n\nexport const setOpponentListAction = (who, list) => ({\n  type: constant.SET_OPPONENT,\n  who,\n  list\n})\nexport const getOpponentListAction = () =>\n{\n  return dispatch => {\n    try {\n      const getResult = async(who) => {\n        dispatch({type: constant.FETCH_OPPONENT, who})\n        const result = await get(`https://swapi.dev/api/${who}/`)\n        dispatch(setOpponentListAction(who, result.data.results))\n        console.log(result)\n      }\n      ['people', 'starships'].forEach(getResult)\n    } catch (error) {\n      console.log('Error:', error)\n    }\n  }\n}\n","import styled from 'styled-components'\nimport { Card } from 'reactstrap'\n\n\nexport const StyledLoading = styled.span`\n  text-align: center;\n  font-size: 32px;\n  font-weight: bold;\n  opacity: 0.7;\n`\n\nexport const StyledCardBody = styled.div`\n  margin-top: 20px;\n`\n\nexport const StyledCard = styled(Card)`\n  width: 100%;\n  font-weight: 600;\n  text-align: center;\n  color: #135175;\n  background-color: rgba(255,255,255,0.85);\n  position: relative;\n\n  @media only screen and (min-width: 768px) {\n    /*  */\n  }\n  @media only screen and (min-width: 992px) {\n    width: 150px;\n    height: 120px;\n  }\n\n`\n\nexport const StyledCardWrapper = styled.div`\n  height: 100%;\n  display: grid;\n  margin: 1rem;\n  max-width: 1280px;\n  grid-template-columns: repeat(auto-fill, minmax(186px, 1fr)) ; grid-template-rows: auto;\n  grid-gap: 10px;\n\n  @media only screen and (min-width: 768px) {\n    grid-template-columns: repeat(8, 1fr);\n    grid-template-rows: repeat(8, 1fr);\n  }\n  @media only screen and (min-width: 992px) {\n    grid-template-rows: repeat(12, 1fr);\n    grid-template-columns: repeat(auto-fill, minmax(150px, 260px));\n  }\n\n`\n\n","export default __webpack_public_path__ + \"static/media/people.e2b3ded2.jpg\";","export default __webpack_public_path__ + \"static/media/starships.72f204f2.webp\";","import styled from 'styled-components'\nimport { Button } from 'react-bootstrap'\nimport { Link } from '@reach/router'\n\n\nexport const StyledMenuButton = styled(Button)`\n  z-index: 1;\n  white-space: nowrap;\n`\nexport const StyledLink = styled(Link)`\n  text-decoration: none;\n  white-space: nowrap;\n  color: #fff;\n  background-color: #007bff;\n  padding: 10px;\n  padding-top: 7px;\n  border-radius: 4px;\n\n  &:hover {\n    text-decoration: none;\n    color: #fff;\n    background-color: #0069d9;\n  }\n`\n\nexport const StyledMenuWrapper = styled.div`\n  grid-column: 1/-1;\n  grid-row: 4/-1;\n  justify-self: center;\n  align-self: end;\n  display: grid;\n  grid-gap: 1rem;\n  grid-template-columns: repeat(3, 1fr);\n\n  @media only screen and (min-width: 768px) {\n    grid-column: 3/7;\n    grid-row: 3/7;\n  }\n  @media only screen and (min-width: 992px) {\n    grid-row: 12/-1;\n    grid-column: 1/6;\n    margin-bottom: 1rem;\n  }\n\n`\n","export const DISPLAY_NEW_OPPONENTS = '[menu] DISPLAY_NEW_OPPONENTS'\nexport const SET_OPPONENTS_TO_FIGHT = '[menu] SET_OPPONENTS_TO_FIGHT'\n","import React, { useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { navigate, Link } from '@reach/router'\n\nimport * as SM from './menu.style'\n// import { CardMenu } from '../card-menu'\n// import { Intro } from '../intro';\nimport { displayNewOpponentsAction, setOpponentsToFightAction } from '../../store/menu.action'\n\nconst Menu = () => {\n  const dispatch = useDispatch();\n  const [ people, starships ] = useSelector(({ card }) => ([\n    card.people,\n    card.starships,\n  ]))\n\n\n\n  const pickOpponents = () => {\n    let first, second\n    const a = Math.round(Math.random())\n    const b = Math.round(Math.random())\n    if ( a === b && a === 0) {\n      const randomList = people.list.sort(() => Math.random() - 0.5)\n      first = randomList[0]\n      second = randomList[1]\n    } else if ( a === b && a === 1) {\n      const randomList = starships.list.sort(() => Math.random() - 0.5)\n      first = randomList[0]\n      second = randomList[1]\n    } else {\n      const randomPeopleList = people.list.sort(() => Math.random() - 0.5)\n      const randomPStarshipList = starships.list.sort(() => Math.random() - 0.5)\n      if ( a === 0){\n        first = randomPeopleList[0]\n        second = randomPStarshipList[0]\n      } else {\n        second = randomPeopleList[0]\n        first = randomPStarshipList[0]\n      }\n    }\n    console.log(first, second, \"you there?\")\n    return dispatch(setOpponentsToFightAction({first, second}))\n  }\n\n  const handlePickedOpponents = () => {\n    pickOpponents()\n    dispatch(displayNewOpponentsAction(true))\n    navigate('/fight')\n  }\n\n  return (\n    <SM.StyledMenuWrapper>\n      <SM.StyledMenuButton\n        onClick={handlePickedOpponents}\n      >Pick Opponents\n      </SM.StyledMenuButton>\n      <SM.StyledLink\n        to=\"/gh-pages-url/card-menu\">\n        Card Menu\n      </SM.StyledLink>\n      <SM.StyledLink\n        to=\"/gh-pages-url\">\n        Back to Intro\n      </SM.StyledLink>\n    </SM.StyledMenuWrapper>\n  )\n}\n\nexport { Menu }\n","import * as constant from './menu.constant'\n\nexport const setOpponentsToFightAction = opponents => ({\n  type: constant.SET_OPPONENTS_TO_FIGHT,\n  ...opponents\n})\n\nexport const displayNewOpponentsAction = displayOpponents => ({\n  type: constant.DISPLAY_NEW_OPPONENTS,\n  displayOpponents\n})\n","import React, { useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\n\nimport * as AC from '../../store/card.action'\nimport * as SC from './card-menu.style'\nimport { CardTitle, CardImg } from 'reactstrap'\nimport peopleImg from '../people/people.jpg'\nimport starshipsImg from '../starship/starships.webp'\nimport { Menu } from '../menu/menu.component'\n\n\nconst CardMenu = () => {\n  const dispatch = useDispatch()\n  const [ people, starships, displayOpponents ] = useSelector(({ card, menu }) => ([\n    card.people,\n    card.starships,\n    menu.displayOpponents,\n  ]))\n  useEffect(\n    () => {\n      dispatch(AC.getOpponentListAction())\n    },\n    []\n  )\n\n\n  return (\n    <>\n      <SC.StyledCardWrapper>\n        {people && people.list.map(({ name, mass}, key) => {\n          return (\n            <SC.StyledCard key={key}>\n              <CardImg src={peopleImg} />\n              <SC.StyledCardBody>\n                <CardTitle\n                  tag=\"h6\">{name}</CardTitle>\n              </SC.StyledCardBody>\n            </SC.StyledCard>\n          )\n        })\n        }\n        {people && people.list.map(({ name, crew}, key) => {\n          return (\n            <SC.StyledCard key={key}>\n              <CardImg src={starshipsImg} />\n              <SC.StyledCardBody>\n                <CardTitle\n                  tag=\"h6\">{name}</CardTitle>\n              </SC.StyledCardBody>\n            </SC.StyledCard>\n          )\n        })\n        }\n        {starships.isLoading && <SC.StyledLoading>Loading...</SC.StyledLoading>}\n        {/* <People/>\n        <Starship/> */}\n        <Menu />\n      </SC.StyledCardWrapper>\n    </>\n  )\n}\n\nexport { CardMenu }\n","import styled from 'styled-components'\nimport { Router } from '@reach/router'\n\n\nexport const StyledRouter = styled(Router)`\n  height: 100%;\n`\n\nexport const StyledAppWrapper = styled.div`\n  height: 100%;\n\n`\n","import styled from 'styled-components'\nimport { Card, CardBody, CardSubtitle, CardTitle } from 'reactstrap'\nimport { Button } from 'react-bootstrap'\n\nexport const StyledCardHeader = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  margin: 8px;\n  padding-bottom: 12px;\n  border-bottom: 1px solid #135175;\n`\n\nexport const StyledCardBtn = styled(Button)`\n  background-color: #fff;\n  color: #135175;\n  border-color: #135175;\n  margin-left: 20px;\n\n  &:hover {\n    background-color: rgba(203,203,203,0.38);\n    color: #1A6FA1;\n    border-color: #135175;\n  }\n`\n\nexport const StyledCardSubtitle = styled(CardSubtitle)`\n justify-self: center;\n`\n\nexport const StyledCardBody = styled(CardBody)`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 5px;\n  justify-items: start;\n  overflow-x: auto;\n`\n\nexport const StyledcardDescription = styled(CardSubtitle)`\n  justify-self: end;\n`\nexport const StyledcardTitle = styled(CardTitle)`\n  /* text-align: center; */\n  /* display: flex; */\n  margin: 5px;\n  padding-left: 16px;\n`\n\n\nexport const StyledCard = styled(Card)`\n  width: 400px;\n  height: 40%;\n`\n","import styled from 'styled-components'\nimport { Card } from 'reactstrap'\n\n\nexport const StyledTitle = styled.div`\n  /* opacity: 0.8; */\n  margin-bottom: 1rem;\n  font-size: 40px;\n  font-weight: bold;\n  text-align: center;\n  color: #000;\n  text-shadow: 2px 2px 5px red;\n\n`\n\nexport const StyledCard = styled(Card)`\n  color: #135175;\n`\n\nexport const StyledCardWrapper = styled.div`\n  grid-row: 1/-1;\n  grid-column: 1/-1;\n  margin: 1rem;\n\n  @media only screen and (min-width: 768px) {\n    grid-row: 3/7;\n    grid-column: 3/7\n  }\n  @media only screen and (min-width: 992px) {\n    grid-row: 2/10;\n    grid-column: 2/5;\n  }\n`\nexport const StyledWinnerCard = styled(Card)`\n  color: red;\n  box-shadow: 5px 5px 23px 6px rgba(155,14,14,0.69);\n  text-shadow: 2px 2px 5px red;\n`\n\nexport const StyledFightWrapper = styled.div`\n  justify-items: center;\n  height: 100%;\n  grid-column: 1/-1;\n  grid-row: 1/-1;\n  display: grid;\n  grid-template-rows: repeat(4, 1fr);\n  grid-template-columns: repeat(4, 1fr);\n  grid-gap: 10px;\n\n  @media only screen and (min-width: 768px) {\n    grid-template-columns: repeat(8, 1fr);\n    grid-template-rows: repeat(8, 1fr);\n  }\n  @media only screen and (min-width: 992px) {\n    grid-template-columns: repeat(auto-fill, minmax(150px, 260px));\n    grid-template-rows: repeat(12, 1fr);\n  }\n`\n","import { Menu } from '../menu'\nimport React from 'react'\nimport { useSelector } from 'react-redux'\nimport { CardTitle } from 'reactstrap'\n\nimport * as SR from '../reusable/reusable.style'\nimport { StyledCard, StyledCardWrapper, StyledFightWrapper, StyledTitle, StyledWinnerCard } from './fight.style'\n\nconst Fight = () => {\n  const [firstOpponent, secondOpponent] = useSelector(({ menu }) => [\n    menu.opponents.first,\n    menu.opponents.second,\n  ])\n\n\n  const getWinner = () => {\n    let winner;\n    if (firstOpponent.mass && secondOpponent.mass) {\n      if (parseInt(firstOpponent.mass) > parseInt(secondOpponent.mass)) {\n        winner = firstOpponent.name\n      } else {\n        winner = secondOpponent.name\n      }\n    }\n    else if (firstOpponent.mass && secondOpponent.crew) {\n      if (parseInt(firstOpponent.mass) > parseInt(secondOpponent.crew)) {\n        winner = firstOpponent.name\n      } else {\n        winner = secondOpponent.name\n      }\n    }\n    else if (firstOpponent.crew && secondOpponent.mass) {\n      if (parseInt(firstOpponent.crew) > parseInt(secondOpponent.mass)) {\n        winner = firstOpponent.name\n      } else {\n        winner = secondOpponent.name\n      }\n    }\n    else if (firstOpponent.crew && secondOpponent.crew) {\n      if (parseInt(firstOpponent.crew) > parseInt(secondOpponent.crew)) {\n        winner = firstOpponent.name\n      } else {\n        winner = secondOpponent.name\n      }\n    }\n    else {\n      return 'Tie Match'\n    }\n    return winner\n  }\n\n  return (\n    <StyledFightWrapper>\n      {!firstOpponent && <h1>You have to pick a fight first</h1>}\n      {firstOpponent && <StyledCardWrapper>\n        <StyledTitle>Fight !</StyledTitle>\n        <StyledCard>\n          <SR.StyledCardBody>\n            <CardTitle\n              tag=\"h6\">{firstOpponent.name}</CardTitle>\n          </SR.StyledCardBody>\n        </StyledCard>\n        <StyledCard>\n          <SR.StyledCardBody>\n            <CardTitle\n              tag=\"h6\">{secondOpponent.name}</CardTitle>\n          </SR.StyledCardBody>\n        </StyledCard>\n        <StyledWinnerCard>\n          {/* <CardImg src={starshipsImg} /> */}\n          <SR.StyledCardBody>\n            <CardTitle\n              tag=\"h6\">The WINER is... {getWinner()} !</CardTitle>\n          </SR.StyledCardBody>\n        </StyledWinnerCard>\n      </StyledCardWrapper>}\n      <Menu />\n    </StyledFightWrapper>\n  )\n}\n\nexport { Fight }\n","import styled from 'styled-components'\nimport { Card, CardBody, CardSubtitle, CardTitle } from 'reactstrap'\n\nexport const StyledWarshipCard = styled(Card)`\n  grid-column: 1/-1;\n  grid-row: 3/4;\n\n  @media only screen and (min-width: 768px) {\n    grid-column: 3/-1;\n    grid-row: 1/auto;\n  }\n  @media only screen and (min-width: 992px) {\n    grid-column: 3/-1;\n    grid-row: 1/auto;\n  }\n`\n","import React, { Fragment } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport starshipsImg from './starships.webp'\nimport { CardImg, CardSubtitle } from 'reactstrap'\n\nimport * as AP from '../../store/card.action'\nimport * as SR from '../reusable/reusable.style'\nimport * as SS from './starship.style'\n\nconst Starship = () => {\n  const dispatch = useDispatch()\n  const [starships, firstStarship, secondStarship] = useSelector(({ card }) => ([\n    card.starships,\n    card.starship.first,\n    card.starship.second,\n  ]))\n\n  const getWinner = () => {\n    // If you are reading this, here are two ways to convert strings to numbers\n    const firstStarshipCre = +firstStarship.crew\n    const secondStarshipCrew = parseInt(secondStarship.crew)\n    if ( firstStarshipCre > secondStarshipCrew) {\n      return `${firstStarship.name} is a Winner !`\n    } else {\n      return `${secondStarship.name} is a Winner!`\n    }\n  }\n\n\n  const pickStarships = () => {\n    const [first, second] = starships.list.sort(() => Math.random() - 0.5)\n    dispatch(AP.setStarshipAction(firstStarship ? {} : {first, second}))\n    }\n\n  // console.log(firstStarship)\n\n  return (\n    <SS.StyledWarshipCard>\n      <CardImg top alt=\"starships img\" src={starshipsImg}/>\n      <SR.StyledCardHeader>\n      {!firstStarship && <SR.StyledcardTitle tag=\"h5\">\n        Starships\n      </SR.StyledcardTitle>}\n      {firstStarship && <SR.StyledcardTitle tag=\"h5\">\n        {getWinner(firstStarship)}\n      </SR.StyledcardTitle>}\n      <SR.StyledCardBtn\n        onClick={pickStarships}\n      >Shuffle Starships</SR.StyledCardBtn>\n    </SR.StyledCardHeader>\n      <SR.StyledCardBody>\n        {firstStarship && \n        <>\n        <CardSubtitle\n          tag=\"h6\"\n          className=\"mb-2\n          text-muted\"\n        >\n          {firstStarship.name}\n        </CardSubtitle>\n        <SR.StyledcardDescription\n          tag=\"h6\"\n          className=\"mb-2 text-muted\"\n        >\n          {firstStarship.crew}\n        </SR.StyledcardDescription>\n        <CardSubtitle\n          tag=\"h6\"\n          className=\"mb-2\n          text-muted\"\n        >\n          {secondStarship.name}\n        </CardSubtitle>\n        <SR.StyledcardDescription\n          tag=\"h6\"\n          className=\"mb-2 text-muted\"\n        >\n          {secondStarship.crew}\n        </SR.StyledcardDescription>\n      </>\n      }\n      {!firstStarship && starships.list.map(({ name, crew }) => (\n        <Fragment key={name}>\n            <CardSubtitle\n              tag=\"h6\"\n              className=\"mb-2\n              text-muted\"\n              >\n                {name}\n            </CardSubtitle>\n            <SR.StyledcardDescription\n              tag=\"h6\"\n              className=\"mb-2 text-muted\"\n              >\n                {crew}\n            </SR.StyledcardDescription>\n          </Fragment>\n          ))}\n    </SR.StyledCardBody>\n  </SS.StyledWarshipCard>\n  )\n}\n\nexport { Starship }\n","import styled from 'styled-components'\nimport { Card, CardBody, CardSubtitle, CardTitle } from 'reactstrap'\n\n\nexport const StyledPeopleCard = styled(Card)`\n  grid-column: 1/-1;\n  grid-row: 1/2;\n\n  @media only screen and (min-width: 768px) {\n    grid-column: 1/3;\n    grid-row: 1/auto;\n  }\n  @media only screen and (min-width: 992px) {\n    grid-column: 1/3;\n    grid-row: 1/auto;\n  }\n`\n","import React, { Fragment } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport peopleImg from './people.jpg'\nimport { CardImg, CardSubtitle } from 'reactstrap'\n\nimport * as AP from '../../store/card.action'\nimport * as SR from '../reusable/reusable.style'\nimport * as SP from './pleople.style'\n\n\nconst People = () => {\n  const dispatch = useDispatch()\n  const [ people, firstFighter, secondFighter ] = useSelector(({ card }) => ([\n    card.people,\n    card.fighter.first,\n    card.fighter.second,\n  ]))\n\n  \n  const getWinner = () => {\n    // If you are reading this, here are two ways to convert strings to numbers\n    const firstFighterMass = +firstFighter.mass\n    const secondFighterMass = parseInt(secondFighter.mass)\n    if ( firstFighterMass > secondFighterMass) {\n      return `${firstFighter.name} is a Winner !`\n    } else {\n      return `${secondFighter.name} is a Winner!`\n    }\n  }\n\n\n  const pickFighters = () => {\n    const [first, second] = people.list.sort(() => Math.random() - 0.5)\n    dispatch(AP.setFighterAction(firstFighter ? {} : {first, second}))\n  }\n\n  return (\n    <SP.StyledPeopleCard>\n    <CardImg top alt=\"people img\" src={peopleImg}/>\n    <SR.StyledCardHeader>\n      {firstFighter && <SR.StyledcardTitle tag=\"h5\">\n        {/* Humans */}\n        {getWinner(firstFighter)}\n      </SR.StyledcardTitle>}\n      {!firstFighter && <SR.StyledcardTitle tag=\"h5\">\n        Humans\n      </SR.StyledcardTitle>}\n      <SR.StyledCardBtn\n        onClick={pickFighters}\n      >Shuffle Fighters</SR.StyledCardBtn>\n    </SR.StyledCardHeader>\n    <SR.StyledCardBody>\n      {firstFighter && \n      <>\n        <CardSubtitle\n          tag=\"h6\"\n          className=\"mb-2\n          text-muted\"\n        >\n          {firstFighter.name}\n        </CardSubtitle>\n        <SR.StyledcardDescription\n          tag=\"h6\"\n          className=\"mb-2 text-muted\"\n        >\n          {firstFighter.mass}\n        </SR.StyledcardDescription>\n        <CardSubtitle\n          tag=\"h6\"\n          className=\"mb-2\n          text-muted\"\n        >\n          {secondFighter.name}\n        </CardSubtitle>\n        <SR.StyledcardDescription\n          tag=\"h6\"\n          className=\"mb-2 text-muted\"\n        >\n          {secondFighter.mass}\n        </SR.StyledcardDescription>\n      </>\n      }\n      {!firstFighter && people.list.map(({ name, mass }) => (\n        <Fragment key={name}>\n            <CardSubtitle\n              tag=\"h6\"\n              className=\"mb-2\n              text-muted\"\n              >\n                {name}\n            </CardSubtitle>\n            <SR.StyledcardDescription\n              tag=\"h6\"\n              className=\"mb-2 text-muted\"\n              >\n                {mass}\n            </SR.StyledcardDescription>\n          </Fragment>\n          ))}\n    </SR.StyledCardBody>\n  </SP.StyledPeopleCard>\n  )\n}\n\nexport { People }\n","import styled from 'styled-components'\n\n\nexport const StyledFightWrapper = styled.div`\n  display: grid;\n  height: 100%;\n  margin: 1rem;\n  margin-left: 8rem;\n  max-width: 1280px;\n  grid-template-columns: repeat(auto-fill, minmax(186px, 1fr)) ; grid-template-rows: auto;\n  grid-gap: 10px;\n\n  @media only screen and (min-width: 768px) {\n    grid-template-columns: repeat(8, 1fr);\n    grid-template-rows: repeat(8, 1fr);\n  }\n  @media only screen and (min-width: 992px) {\n    grid-template-rows: repeat(12, 1fr);\n    grid-template-columns: repeat(auto-fill, minmax(150px, 260px));\n  }\n\n`\n","import React from 'react'\nimport { Starship } from '../starship/starship.component'\nimport { People } from '../people/people.component'\n\nimport * as SFV from './fight-first-version.style'\nimport { Menu } from '../menu'\n\nconst FirstVersion = () => {\n  return (\n    <SFV.StyledFightWrapper>\n      <People />\n      <Starship />\n      <Menu />\n    </SFV.StyledFightWrapper>\n  )\n}\n\nexport { FirstVersion }\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { Intro } from '../intro'\n// import store from '../../store'\nimport { CardMenu } from '../card-menu'\nimport { StyledAppWrapper, StyledRouter } from './app.styled'\nimport { Fight } from '../fight'\nimport { FirstVersion } from '../fight-first-version'\n\nconst App = () => {\n\n  const skipIntro = useSelector(({ intro }) => intro.skipIntro)\n  const { port } = window.location\n\n  return (\n    <StyledAppWrapper>\n      <StyledRouter>\n        <Intro path=\"/\" />\n        <CardMenu path=\"/card-menu/\" />\n        <Fight path=\"/fight\" />\n        <FirstVersion path=\"/fight-first-version\" />\n\n        <Intro path=\"/gh-pages-url\" />\n        <CardMenu path=\"/gh-pages-url/card-menu/\" />\n        <Fight path=\"/gh-pages-url/fight\" />\n        <FirstVersion path=\"/gh-pages-url/fight-first-version\" />\n      </StyledRouter>\n    </StyledAppWrapper>\n  )\n}\n\nexport { App }\n","import * as constant from './card.constant'\n\n\nexport const initialState = {\n  people: {list: [], isLoading: false},\n  starships: {list: [], isLoading: false},\n  fighter: {},\n  starship: {},\n}\n\nexport const cardReducer = ( state = initialState, action ) => {\n  switch (action.type){\n    case constant.SET_STARSHIPS:\n      return {\n        ...state,\n        starship: {\n          first: action.first,\n          second: action.second,\n          }\n      }\n    case constant.SET_FIGHTER:\n      return {\n        ...state,\n        fighter: {\n          first: action.first,\n          second: action.second,\n        }\n      }\n    case constant.FETCH_OPPONENT:\n      return {\n        ...state,\n        [action.who]: {\n          list: [],\n          isLoading: true,\n        },\n      }\n    case constant.SET_OPPONENT:\n      return {\n        ...state,\n        [action.who]: {\n          list: action.list,\n          isLoading: false,\n        },\n      }\n    default:\n      return state\n  }\n}\n","import * as constant from './intro.constant'\n\nexport const initialState = {\n  skipIntro: false,\n  muted: true,\n}\n\nexport const introReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case constant.SET_MUTED:\n      return {\n        ...state,\n        muted: action.muted\n      }\n    case constant.SKIP_INTRO:\n      return {\n        ...state,\n        skipIntro: action.skipIntro\n      }\n    default:\n      return state\n  }\n}\n","import * as constant from './menu.constant'\n\nexport const initialState = {\n  displayOpponents: false,\n  opponents: {},\n}\n\nexport const menuReducer = ( state = initialState, action) => {\n  switch (action.type) {\n    case constant.SET_OPPONENTS_TO_FIGHT:\n      return {\n        ...state,\n        opponents: {\n          first: action.first,\n          second: action.second,\n        }\n      }\n    case constant.DISPLAY_NEW_OPPONENTS:\n      return {\n        ...state,\n        displayOpponents: action.displayOpponents\n      }\n    default:\n      return state\n  }\n}\n","import { combineReducers } from 'redux'\nimport { cardReducer } from './card.reducer'\nimport { introReducer } from './intro.reducer'\nimport { menuReducer } from './menu.reducer'\n\nconst createReducer = asyncReducers => combineReducers({\n    intro: introReducer,\n    card: cardReducer,\n    menu: menuReducer,\n  ...asyncReducers\n})\n\nexport default createReducer\n","import * as reduxModule from 'redux';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport createReducer from './reducer';\n\n/*\nFix for Firefox redux dev tools extension\nhttps://github.com/zalmoxisus/redux-devtools-instrument/pull/19#issuecomment-400637274\n */\nreduxModule.__DO_NOT_USE__ActionTypes.REPLACE = '@@redux/INIT';\n\nconst composeEnhancers =\n  process.env.NODE_ENV !== 'production' && typeof window === 'object' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n        // Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\n      })\n    : compose;\n\nconst enhancer = composeEnhancers(applyMiddleware(thunk));\n\nconst store = createStore(createReducer(), enhancer);\n\nstore.asyncReducers = {};\n\nexport const injectReducer = (key, reducer) => {\n  if (store.asyncReducers[key]) {\n    return false;\n  }\n  store.asyncReducers[key] = reducer;\n  store.replaceReducer(createReducer(store.asyncReducers));\n  return store;\n};\n\nexport default store;\n","import React from 'react'\nimport { render } from 'react-dom'\nimport { App } from './component/app'\nimport './index.css'\nimport store from './store'\nimport { Provider } from 'react-redux'\n\nimport 'bootstrap/dist/css/bootstrap.css'\n// import 'bootstrap/dist/css/bootstrap.min.css';\n\n\n\nconst here = document.getElementById('app')\n\nconst app =<Provider store={store}>\n<App/> </Provider>\n\nrender(app, here)\n\n"],"sourceRoot":""}